name: Development Workflow

on:
  push:


jobs:
  lint:
    name: Lint Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3


      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint
        continue-on-error: true # <- To avoid actually having to fix the linting issues :)

  build:
    name: Build Application (node)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
#  aws-dockerize:
#    name: Build Application (Docker AWS)
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v3
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Build, tag, and push image to Amazon ECR
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: scheibelhofer-repo
#          IMAGE_TAG: latest
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
